<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Translate 130+ Languages ‚Ä¢ LICENSE G·ªêC‚Ñ¢</title>
<style>
  :root{
    --bg:#0a0b0f;
    --panel:#111;
    --muted:#b7b3a3;
    --text:#eae7dc;
    --gold:#f5d36a;
    --gold-soft:#e5c86b;
    --line:rgba(245,211,106,.25);
    --radius:16px;
  }
  *{box-sizing:border-box}
  body{
    margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;
    background:var(--bg); color:var(--text); line-height:1.55;
  }
  header{
    position:sticky; top:0; z-index:10;
    background:linear-gradient(180deg,#111,rgba(17,17,17,.8));
    border-bottom:1px solid var(--line);
    padding:14px 18px;
  }
  header h1{margin:0; font-size:1.15rem; letter-spacing:.2px}
  header small{color:var(--muted)}
  main{max-width:960px; margin:24px auto; padding:0 16px 40px}
  .card{
    background:var(--panel); border:1px solid var(--line);
    border-radius:var(--radius); padding:16px; box-shadow:0 0 0 1px rgba(255,255,255,.02) inset, 0 12px 30px rgba(0,0,0,.25);
  }
  .row{display:grid; gap:12px}
  .row.cols-2{grid-template-columns:1fr 1fr}
  select, textarea, input, button{
    width:100%; border-radius:12px; border:1px solid var(--line);
    background:#0f1117; color:var(--text); padding:12px 12px; font-size:15px;
  }
  textarea{min-height:160px; resize:vertical}
  .toolbar{display:flex; gap:10px; flex-wrap:wrap; margin:10px 0 0}
  .btn{
    display:inline-flex; align-items:center; justify-content:center; gap:8px;
    padding:12px 16px; border:1px solid var(--line); border-radius:12px;
    background:linear-gradient(180deg,#171717,#101010);
    color:var(--text); cursor:pointer; text-decoration:none; font-weight:600;
  }
  .btn.gold{background:linear-gradient(180deg,#5a4b12,#2b2408); border-color:#6b5b1a}
  .btn.gold span{color:var(--gold)}
  .hint{color:var(--muted); font-size:.92rem}
  footer{margin:28px 0 12px; text-align:center; color:var(--muted); font-size:.92rem}
  .badge{display:inline-block; padding:4px 10px; border:1px solid var(--line); border-radius:999px; background:#0f1117; color:var(--gold-soft); font-weight:700; letter-spacing:.3px; margin-left:8px}
  .grid-note{margin-top:10px}
  @media(max-width:760px){ .row.cols-2{grid-template-columns:1fr} }
</style>
</head>
<body>
  <header>
    <h1>üåê Translate 130+ Languages <small class="badge">Demo</small></h1>
    <small>No key required ‚Ä¢ Auto-detect source ‚Ä¢ Powered by MyMemory (free tier)</small>
  </header>

  <main>
    <div class="card">
      <div class="row cols-2">
        <div>
          <label class="hint">From (auto-detect)</label>
          <input id="from" value="Auto" disabled />
        </div>
        <div>
          <label class="hint">To language</label>
          <select id="langTo"></select>
        </div>
      </div>

      <div class="row" style="margin-top:12px">
        <div>
          <label class="hint">Enter text</label>
          <textarea id="src" placeholder="Nh·∫≠p n·ªôi dung c·∫ßn d·ªãch‚Ä¶ (Vietnamese ‚Üí ch·ªçn English ·ªü b√™n ph·∫£i)"></textarea>
        </div>
        <div>
          <label class="hint">Result</label>
          <textarea id="dst" placeholder="K·∫øt qu·∫£ d·ªãch s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y‚Ä¶" readonly></textarea>
        </div>
      </div>

      <div class="toolbar">
        <button class="btn gold" id="btnTranslate"><span>‚ñ∂</span> Translate</button>
        <button class="btn" id="btnSwap">‚áÑ Swap output ‚Üí input</button>
        <button class="btn" id="btnCopy">‚ßâ Copy result</button>
        <button class="btn" id="btnClear">‚úï Clear</button>
      </div>
      <div class="hint grid-note">
        Tip: Free API c√≥ gi·ªõi h·∫°n ƒë·ªô d√†i. N·∫øu vƒÉn b·∫£n d√†i, c√¥ng c·ª• s·∫Ω t·ª± ƒë·ªông chia nh·ªè ƒë·ªÉ d·ªãch tu·∫ßn t·ª±.
      </div>
    </div>

    <footer>
      ¬© 2025 LICENSE G·ªêC‚Ñ¢ ‚Äî The Root. Eternal. Universal.
    </footer>
  </main>

<script>
/* ==== Language list (~130) using ISO codes compatible with MyMemory ==== */
const LANGS = [
  ["af","Afrikaans"],["sq","Albanian"],["am","Amharic"],["ar","Arabic"],["hy","Armenian"],
  ["az","Azerbaijani"],["eu","Basque"],["be","Belarusian"],["bn","Bengali"],["bs","Bosnian"],
  ["bg","Bulgarian"],["my","Burmese"],["ca","Catalan"],["ceb","Cebuano"],["ny","Chichewa"],
  ["zh-CN","Chinese (Simplified)"],["zh-TW","Chinese (Traditional)"],["co","Corsican"],["hr","Croatian"],["cs","Czech"],
  ["da","Danish"],["dv","Dhivehi"],["nl","Dutch"],["en","English"],["eo","Esperanto"],
  ["et","Estonian"],["fi","Finnish"],["fr","French"],["fy","Frisian"],["gl","Galician"],
  ["ka","Georgian"],["de","German"],["el","Greek"],["gu","Gujarati"],["ht","Haitian Creole"],
  ["ha","Hausa"],["haw","Hawaiian"],["he","Hebrew"],["hi","Hindi"],["hmn","Hmong"],
  ["hu","Hungarian"],["is","Icelandic"],["ig","Igbo"],["id","Indonesian"],["ga","Irish"],
  ["it","Italian"],["ja","Japanese"],["jv","Javanese"],["kn","Kannada"],["kk","Kazakh"],
  ["km","Khmer"],["rw","Kinyarwanda"],["ko","Korean"],["ku","Kurdish (Kurmanji)"],["ckb","Kurdish (Sorani)"],
  ["ky","Kyrgyz"],["lo","Lao"],["la","Latin"],["lv","Latvian"],["lt","Lithuanian"],
  ["lb","Luxembourgish"],["mk","Macedonian"],["mg","Malagasy"],["ms","Malay"],["ml","Malayalam"],
  ["mt","Maltese"],["mi","Maori"],["mr","Marathi"],["mn","Mongolian"],["ne","Nepali"],
  ["no","Norwegian"],["or","Odia"],["ps","Pashto"],["fa","Persian"],["pl","Polish"],
  ["pt","Portuguese"],["pa","Punjabi"],["ro","Romanian"],["ru","Russian"],["sm","Samoan"],
  ["gd","Scots Gaelic"],["sr","Serbian"],["st","Sesotho"],["sn","Shona"],["sd","Sindhi"],
  ["si","Sinhala"],["sk","Slovak"],["sl","Slovenian"],["so","Somali"],["es","Spanish"],
  ["su","Sundanese"],["sw","Swahili"],["sv","Swedish"],["tl","Tagalog"],["tg","Tajik"],
  ["ta","Tamil"],["tt","Tatar"],["te","Telugu"],["th","Thai"],["bo","Tibetan"],
  ["tr","Turkish"],["tk","Turkmen"],["uk","Ukrainian"],["ur","Urdu"],["ug","Uyghur"],
  ["uz","Uzbek"],["vi","Vietnamese"],["cy","Welsh"],["xh","Xhosa"],["yi","Yiddish"],
  ["yo","Yoruba"],["zu","Zulu"],["ay","Aymara"],["qu","Quechua"],["sa","Sanskrit"],
  ["bs-Latn","Bosnian (Latin)"],["sr-Latn","Serbian (Latin)"],["fil","Filipino"],["kk-Latn","Kazakh (Latin)"],
  ["mn-Mong","Mongolian (Traditional)"],["pt-BR","Portuguese (Brazil)"],["pt-PT","Portuguese (Portugal)"],
  ["zh","Chinese"],["uz-Latn","Uzbek (Latin)"],["bn-IN","Bengali (India)"],["bn-BD","Bengali (Bangladesh)"],
  ["fr-CA","French (Canada)"],["fr-FR","French (France)"],["es-MX","Spanish (Mexico)"],["es-ES","Spanish (Spain)"],
  ["de-AT","German (Austria)"],["de-CH","German (Switzerland)"],["en-GB","English (UK)"],["en-US","English (US)"]
];
const toSel = document.getElementById('langTo');
LANGS.forEach(([code,name])=>{
  const o=document.createElement('option');
  o.value=code; o.textContent=name; 
  if(code==="en") o.selected=true;
  toSel.appendChild(o);
});

const $ = id => document.getElementById(id);
const btnTranslate = $("btnTranslate");
const btnCopy = $("btnCopy");
const btnClear = $("btnClear");
const btnSwap = $("btnSwap");

function chunkText(t, size=480){
  const parts=[]; let i=0;
  while(i<t.length){ parts.push(t.slice(i, i+size)); i+=size; }
  return parts;
}

// MyMemory free endpoint (no key). It supports many language pairs.
async function translateMyMemory(q, to){
  // Auto-detect source by using 'auto|to'
  const url = (text) => `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=auto|${encodeURIComponent(to)}`;
  const parts = chunkText(q);
  let out = "", detected = null;
  for (const p of parts){
    const r = await fetch(url(p));
    const j = await r.json();
    const seg = j.responseData?.translatedText || "";
    out += (out && seg ? "\n" : "") + seg;
    if(!detected && j.responseData?.match) {
      // best-effort detection label (not guaranteed)
      detected = j.responseData.match;
    }
  }
  return { text: out.trim(), detected: detected || "Auto" };
}

// Fallback via LibreTranslate public (may be rate limited)
async function translateLibre(q,to){
  const r = await fetch("https://libretranslate.com/translate",{
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body: JSON.stringify({ q, source:"auto", target:to, format:"text" })
  });
  const j = await r.json();
  return { text: j.translatedText?.trim() || "", detected:"Auto" };
}

btnTranslate.addEventListener("click", async ()=>{
  const text = $("src").value.trim();
  if(!text){ $("dst").value=""; return; }
  const to = toSel.value;
  $("dst").value = "Translating‚Ä¶ please wait.";
  btnTranslate.disabled = true;
  try{
    let res;
    try{
      res = await translateMyMemory(text, to);
      if(!res.text) throw new Error("empty");
    }catch(e){
      // fallback
      res = await translateLibre(text, to);
    }
    $("dst").value = res.text || "(no result)";
    $("from").value = res.detected || "Auto";
  }catch(err){
    $("dst").value = "‚ö†Ô∏è Error translating. Please try again.";
    console.error(err);
  }finally{
    btnTranslate.disabled = false;
  }
});

btnCopy.addEventListener("click", async ()=>{
  try{
    await navigator.clipboard.writeText($("dst").value || "");
    btnCopy.textContent="Copied!";
    setTimeout(()=>btnCopy.textContent="‚ßâ Copy result", 1200);
  }catch(e){}
});

btnClear.addEventListener("click", ()=>{
  $("src").value=""; $("dst").value="";
});

btnSwap.addEventListener("click", ()=>{
  const t = $("dst").value;
  if(t){ $("src").value = t; $("dst").value=""; }
});
</script>
</body>
</html>